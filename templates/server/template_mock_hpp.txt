{% with %}
{% set class_namespace_name = meta.interface_name+"ServerMock" %}
{% set generated_interface_name = "Interface"+meta.interface_name+"Server" %}
{% set class_name = "C"+class_namespace_name %}
///////////////////////////////////////////////////////////////////////////////
///
/// Project          {{ settings.project_name }}
/// Copyright (c)    2017
/// Company          {{ settings.company }}
///                  All rights reserved
///
////////////////////////////////////////////////////////////////////////////////
/// @file            {{ class_name }}.hpp
/// @authors         {{ settings.author }}
/// @date            27.10.17
///
/// @brief           Declaration of class {{ class_name }}
///
////////////////////////////////////////////////////////////////////////////////

#ifndef {{ class_name|upper }}_HPP_
#define {{ class_name|upper }}_HPP_

#include <gmock/gmock.h>
#include "{{ class_name }}.hpp"
#include "{{ generated_interface_name }}.hpp"


namespace {{ settings.project_name }} {
namespace Interfaces {
namespace {{ class_namespace_name }} {

/* ==========================================================================================
 *                     MOCK INTERFACE
 * ==========================================================================================
 */
struct {{ class_name }} : public {{ meta.interface_name }}Server::{{ generated_interface_name }} {
/* ==========================================================================================
 *                     INFORMATIONS - CommonAPI "broadcast" handlers
 * ==========================================================================================
 */
{% for broadcast in meta['broadcasts'] %}
{% set broadcast_name = "mock_information"+broadcast.name[0]|upper+broadcast.name[1:] %}
  MOCK_METHOD0({{ broadcast_name }}, void());
{% endfor %}

/* ==========================================================================================
 *                                          REQUESTS
 * ==========================================================================================
 */
{% for method in meta['methods'] %}
{% set method_name = "mock_"+method.name %}
  MOCK_METHOD0({{ method_name }}, void());
{% endfor %}
};

using {{ class_name }}Ptr = std::shared_ptr<{{ class_name }}>;
using {{ class_name }}WeakPtr = std::weak_ptr<{{ class_name }}>;

using C{{ meta.interface_name }}ServerStrictMock = ::testing::StrictMock<{{ class_name }}>;
using C{{ meta.interface_name }}ServerNiceMock = ::testing::NiceMock<{{ class_name }}>;

using C{{ meta.interface_name }}ServerStrictMockPtr = std::shared_ptr<C{{ meta.interface_name }}ServerStrictMock>;
using C{{ meta.interface_name }}ServerStrictMockWeakPtr = std::weak_ptr<C{{ meta.interface_name }}ServerStrictMock>;

using C{{ meta.interface_name }}ServerNiceMockPtr = std::shared_ptr<C{{ meta.interface_name }}ServerNiceMock>;
using C{{ meta.interface_name }}ServerNiceMockWeakPtr = std::weak_ptr<C{{ meta.interface_name }}ServerNiceMock>;

}  // namespace {{ class_namespace_name }}
}  // namespace Interfaces
}  // namespace {{ settings.project_name }}

#endif  // {{ class_name|upper }}_HPP_
{% endwith %}
