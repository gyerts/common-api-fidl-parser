{% with %}
{% set class_namespace_name = meta.interface_name+"Server" %}
{% set interface_name = "Interface"+class_namespace_name %}
{% set class_name = "C"+class_namespace_name %}
///////////////////////////////////////////////////////////////////////////////
///
/// Project          {{ settings.PROJECT_NAME }}
/// Copyright (c)    2017
/// Company          {{ settings.COMPANY }}
///                  All rights reserved
///
////////////////////////////////////////////////////////////////////////////////
/// @file            {{ class_name }}.hpp
/// @authors         {{ settings.AUTHOR }}
/// @date            27.10.17
///
/// @brief           Declaration of class {{ class_name }}
///
////////////////////////////////////////////////////////////////////////////////

#ifndef {{ class_name|upper }}_HPP_
#define {{ class_name|upper }}_HPP_

#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

#include <v1/{{ meta.generated_path }}/{{ meta.interface_name }}StubDefault.hpp>
#include <wnpp_common/DebugMessages/CDebugMessages.hpp>
#include <pso/third_party/icc/src/commonapi/CommonAPIService.hpp>
#include <pso/src/private/interfaces/ICallback.hpp>


{% if settings.is_mock %}
#include "Interface{{ meta.interface_name }}Server.hpp"
{% endif %}

namespace {{ settings.project_name }} {
namespace Interfaces {
namespace {{ class_namespace_name }} {

using Logger = WLanNetworking::Common::DebugMessages::CDebugMessages;
using v1::{{ meta.generated_namespace }}::{{ meta.interface_name }};
using v1::{{ meta.generated_namespace }}::{{ meta.interface_name }}StubDefault;
using CallbacksHelper::ICallback;


class {{ class_name }}
  : public icc::commonapi::CommonAPIService<{{ meta.interface_name }}StubDefault>
  , public Logger
  , public ICallback {
 public:
  /* ==========================================================================================
   *                                      C-TORS / D-TORS
   * ==========================================================================================
   */

  {{ class_name }}();
  virtual ~{{ class_name }}();


  /* ==========================================================================================
   *                                       PUBLIC METHODS
   * ==========================================================================================
   */

{% if settings.is_mock %}
  /**
   * On start of tests here should be set Strict or Nice Mocks for test purpose
   */
  void setMock(std::weak_ptr<{{ interface_name }}> _mock);
{% endif %}

  void setCallbacks() override;


  /* ==========================================================================================
   *                                      ATTRIBUTE SETTERS
   * ==========================================================================================
   */
{% for attribute in meta['attributes'] %}
{% if attribute["description"] %}

  /**
   * {{ attribute["description"] }}
   */
{% endif %}
  void set{{ attribute.name[0]|upper }}{{ attribute.name[1:] }}Attribute({{ attribute["type"] }} _{{ attribute["name"] }}) override;
{% endfor %}


  /* ==========================================================================================
   *                                       REQUEST HANDLERS
   * ==========================================================================================
   */

{% for method in meta['methods'] %}
{% if method["description"] %}
  /**
   * {{ method["description"] }}
   */
{% endif %}
  void {{ method.name }}(
{% if method["in"] %}
    const std::shared_ptr<CommonAPI::ClientId> _client,
{% else %}
    const std::shared_ptr<CommonAPI::ClientId> _client) override;
{% endif %}
{% for param in method["in"] %}
{% if loop.last %}
    const {{ param.type }} _{{ param.name }}) override;
{% else %}
    const {{ param.type }} _{{ param.name }},
{% endif %}
{% endfor %}

{% endfor %}


  /* ==========================================================================================
   *                                    BROADCASTS WRAPPERS
   * ==========================================================================================
   */
{% for broadcast in meta['broadcasts'] %}
{% set upper_name = broadcast.name[0]|upper + broadcast.name[1:] %}

  /**
   * {{ broadcast["description"] }}
   */
   void fire{{ upper_name }}Event({% for param in broadcast["out"] %}{% if loop.last %}const {{ param.type }} &_{{ param.name }}{% else %}const {{ param.type }} &_{{ param.name }}, {% endif %}{% endfor %}) {
     debug("%s{{ broadcast.out_debug_left }}", __func__{{ broadcast.out_debug_right }});
     {{ meta.interface_name }}StubDefault::fire{{ upper_name }}Event({{ broadcast.out_params_n }});
   }
{% endfor %}
{% if settings.is_mock %}


 private:
  /* ==========================================================================================
   *                                      PRIVATE MEMBERS
   * ==========================================================================================
   */
  std::weak_ptr<{{ interface_name }}> mock_;
{% endif %}
};

}  // namespace {{ class_namespace_name }}
}  // namespace Interfaces
}  // namespace {{ settings.project_name }}

#endif  // {{ class_name|upper }}_HPP_
{% endwith %}
