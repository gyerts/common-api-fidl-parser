{% with %}
{% set class_namespace_name = meta.interface_name+"Server" %}
{% set interface_name = "Interface"+class_namespace_name %}
{% set class_name = "C"+class_namespace_name %}
///////////////////////////////////////////////////////////////////////////////
///
/// Project          {{ settings.project_name }}
/// Copyright (c)    2017
/// Company          {{ settings.company }}
///                  All rights reserved
///
////////////////////////////////////////////////////////////////////////////////
/// @file            {{ class_name }}.cpp
/// @authors         {{ settings.author }}
/// @date            {{ meta.current_date }}
///
/// @brief           Implementation of class {{ class_name }}
///
////////////////////////////////////////////////////////////////////////////////

#include <memory>
#include <string>

#include "{{ class_name }}.hpp"
{% if settings.is_mock %}
#include "Interface{{ meta.interface_name }}Server.hpp"
{% endif %}

namespace {{ settings.project_name }} {
namespace Interfaces {
namespace {{ class_namespace_name }} {

  /* ==========================================================================================
   *                                      C-TORS / D-TORS
   * ==========================================================================================
   */

  {{ class_name }}::{{ class_name }}()
{% if settings.icc %}
    : icc::commonapi::CommonAPIService<{{ meta.interface_name }}StubDefault>()
    , Logger("[{{ class_name }}]") {
{% else %}
    : Logger("[{{ class_name }}]") {
{% endif %}

    debug("%s: Construct", __func__);
{% if generate_callbacks %}
    setCallbacks();
{% endif %}
  }

  {{ class_name }}::~{{ class_name }}() {
    debug("%s: Destruct", __func__);
  }

  /* ==========================================================================================
   *                                       PUBLIC METHODS
   * ==========================================================================================
   */

{% if settings.is_mock %}
  /**
   * On start of tests here should be set Strict or Nice Mocks for test purpose
   */
  void {{ class_name }}::setMock(std::weak_ptr<{{ interface_name }}> _mock) {
    debug("%s", __func__);
    mock_ = _mock;
  }
{% endif %}
{% if generate_callbacks %}

  void {{ class_name }}::setCallbacks() {
    namespace Helper = WLanNetworking::Common::CallbackHelper;
    // broadcasts call-backs
{% for broadcast in meta['broadcasts'] %}
{% set upper_name = broadcast.name[0]|upper + broadcast.name[1:] %}
{% set broadcast_name = "fire"+upper_name+"Event" %}
    set("fire_{{ broadcast["snake_name"] }}", Helper::plainCall(this, &{{ class_name }}::{{ broadcast_name }}));
{% endfor %}
    // attribute call-backs
{% for attribute in meta['attributes'] %}
{% set upper_name = attribute.name[0]|upper + attribute.name[1:] %}
{% set attribute_name = "set"+attribute.name[0]|upper + attribute.name[1:]+"Attribute" %}
    set("set_{{ attribute["snake_name"] }}", Helper::plainCall(this, &{{ class_name }}::{{ attribute_name }}));
{% endfor %}
  }
{% endif %}

  /* ==========================================================================================
   *                                      ATTRIBUTE SETTERS
   * ==========================================================================================
   */
{% for attribute in meta['attributes'] %}
{% set attribute_name = "set"+attribute.name[0]|upper+attribute.name[1:]+"Attribute" %}
{% if attribute["description"] %}

  /**
   * {{ attribute["description"] }}
   */
{% endif %}
  void {{ class_name }}::{{ attribute_name }}({{ attribute["type"] }} _{{ attribute["name"] }}) {
    debug("%s{{ attribute.in_debug_left }}", __func__{{ attribute.in_debug_right }});
    {{ meta.interface_name }}StubDefault::{{ attribute_name }}(_{{ attribute["name"] }});
  }
{% endfor %}

  /* ==========================================================================================
   *                                       REQUEST HANDLERS
   * ==========================================================================================
   */

{% for method in meta['methods'] %}
{% set reply_param = method.name+"Reply_t _reply" %}

{% if method["description"] %}
  /**
   * {{ method["description"] }}
   */
{% endif %}
  void {{ class_name }}::{{ method.name }}(
{% if method["in"] %}
    const std::shared_ptr<CommonAPI::ClientId> _client,
{% else %}
{% if method.fireAndForget %}
    const std::shared_ptr<CommonAPI::ClientId> _client) {
{% else %}
    const std::shared_ptr<CommonAPI::ClientId> _client,
{% endif %}
{% endif %}
{% for param in method["in"] %}
{% if loop.last and method.fireAndForget %}
    const {{ param.type }} _{{ param.name }}) {
{% else %}
    const {{ param.type }} _{{ param.name }},
{% endif %}
{% endfor %}
{% if not method.fireAndForget %}
    {{ meta.interface_name }}Stub::{{ reply_param }}) {
{% endif %}
    debug("%s{{ method.in_debug_left }}", __func__{{ method.in_debug_right }});

{% if settings.is_mock %}
    if (auto mock = mock_.lock()) {
      debug("[{{ class_name|upper }}][CLIENT][  OK ] %s, call mock->mock_{{ method.name }}", __func__);
      mock->mock_{{ method.name }}();
    } else {
      error("[{{ class_name|upper }}][CLIENT][ERROR] %s, call mock failed, mock_ is not initialized", __func__);
    }
{% endif %}
  }
{% endfor %}

}  // namespace {{ class_namespace_name }}
}  // namespace Interfaces
}  // namespace {{ settings.project_name }}
{% endwith %}
