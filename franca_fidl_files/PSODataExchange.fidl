package usermanager.psodataexchange

import model "DataExchangeCommonTypes.fidl"

interface IPSODataExchange {
    version { major 1 minor 0 }
    
    typedef tEOperationResult is usermanager.DataExchangeCommonTypes.eOperationResult
    typedef tPSODomainsList is usermanager.DataExchangeCommonTypes.PSODomainsList
    typedef tEPSODomain is usermanager.DataExchangeCommonTypes.ePSODomain
    typedef tEProcessStatus is usermanager.DataExchangeCommonTypes.eProcessStatus
    typedef tPSOIDsList is usermanager.DataExchangeCommonTypes.PSOIDsList
    
    
    <** @description: This method used to notify about PSO parameters, that should be tracked **>
    broadcast onPSOParameterListUpdste
    {
        out {
            tEPSODomain domain
            tPSOIDsList PSOIDsList
        }
    }
    
    <** @description: Upon receiving this notification each ATN should make all persistency keys in slot persistency. method readyToSlotChange shall be called mandatory by each ATN after successfull writing to Persistency **>
    broadcast onMakePSOParametersPersistant
    {
        out {
            tPSODomainsList domainsList
        }
    }
    
    <** @description : This method should be called mandatory upon receiving broadcast onPrepareToSlotChange and update persistant data **>
    method persistantParametersUpdated fireAndForget {
        in {
            tEPSODomain domain
        }        
    }
    
    <** @description: Upon receiving this notification each PSO Domain should implement their own requirements related to PSO profile change, eg. Audio should be muted while profile change **>
    broadcast onSlotChange
    {
        out {
            tEProcessStatus processStatus
        }
    }
    
    <** @description: Upon receiving this notification each PSO Domain should read their PSO parameter from Persistency. Method readingFinished shall be called mandatory by each ATN after reading PSO parameters from Persistency **>
    broadcast onReadPSOParameters
    {
        out {
            tPSODomainsList domainsList
        }
    }
    
    <** @description : This method should be called mandatory upon receiving broadcast onReadPSOParameters and all PSO parameters were read from Persistency **>
    method readingPSOParametresFinished fireAndForget {
        in {
            tEPSODomain domain
            tEOperationResult result
        }
    }
    
    <** @description : This method should be called mandatory upon change the value of any PSO parameter tracked on backend **>
    method updatePSOParameter fireAndForget {
        in {
            tEPSODomain domain
            Int32 parameterID
        }
    }
    
    <** @description: Upon receiving this notification each PSO Domain should provide PSO with parameters to export to the backend. method exportFinished shall be called mandatory by each ATN after providing PSO with values of parameters to be exported **>
    broadcast onStartExport
    {
        out {
            tEPSODomain domain
            tPSOIDsList psoIDsList
        }
    }
    
    <** @description : This method should be called mandatory upon receiving broadcast onStartExport after all PSO parameters tracked by backend were provided to PSO **>
    method exportFinished fireAndForget {
        in {
            tEPSODomain domain            
        }
    }
    
    <** @description : This method should be used for export transaaction if PSO parameter value is default value **>
    method applyDefaultExportParameter fireAndForget {
        in {
            tEPSODomain domain     
            Int32 parameterID
            Int32 dataDescription
        }
    }
    
    <** @description : This method should be used for export transaaction if PSO parameter value is different from default value **>
    method applyExportParameter fireAndForget {
        in {
            tEPSODomain domain     
            Int32 parameterID
            Int32 dataDescription
            String parameterValue
        }
    }
    
    <** @description: This nofification should be used for each ATN and each imported PSO parameter with default value for applying imported default Parameter and making it Persistant **>
    broadcast applyDefaultImportedParameter
    {
        out {
            tEPSODomain domain
            Int32 parameterID
            Int32 dataDescription
        }
    }
    
    <** @description: This nofification should be used for each ATN and each imported PSO parameter with value different from default for applying imported Parameter and making it Persistant **>
    broadcast applyImportedParameter
    {
        out {
            tEPSODomain domain
            Int32 parameterID
            Int32 dataDescription
            String parameterValue
        }
    }
}